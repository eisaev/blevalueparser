name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    strategy:
      matrix:
        OS: [ubuntu-20.04, macos-12]
        BUILD_TYPE: [Debug, MinSizeRel]
        QT_VERSION: [5.15.2, 6.2.4]
        include:
          - QT_VERSION: 6.2.4
            QT_MODULES: qtconnectivity
          - OS: ubuntu-20.04
            HOST: linux
            ARCH: gcc_64
          - OS: macos-12
            HOST: mac
            ARCH: clang_64

    runs-on: ${{matrix.OS}}

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Install Ninja
      uses: seanmiddleditch/gha-setup-ninja@v3

    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        version:      ${{matrix.QT_VERSION}}
        host:         ${{matrix.HOST}}
        target:       desktop
        arch:         ${{matrix.ARCH}}
        dir:          ${{runner.temp}}
        modules:      ${{matrix.QT_MODULES}}
        setup-python: false
        cache:        true

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -G Ninja -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{matrix.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{matrix.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build/tests
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{matrix.BUILD_TYPE}}

  coverage:
    runs-on: ubuntu-20.04

    env:
      COVERAGE_PATH: ${{github.workspace}}/build/coverage
      BUILD_TYPE: Debug

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Install gcovr
      uses: awalsh128/cache-apt-pkgs-action@v1
      with:
        packages: gcovr
        debug: false

    - name: Install Ninja
      uses: seanmiddleditch/gha-setup-ninja@v3

    - name: Configure CMake
      run: cmake -G Ninja -B ${{env.COVERAGE_PATH}} -DTESTS_ONLY=ON -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_CXX_FLAGS_DEBUG="-g --coverage"

    - name: Build
      run: cmake --build ${{env.COVERAGE_PATH}} --config ${{env.BUILD_TYPE}} --target bvptest

    - name: Test
      working-directory: ${{env.COVERAGE_PATH}}/tests
      run: ctest -C ${{env.BUILD_TYPE}}

    - name: Prepare Folders
      run: mkdir -p ${{env.COVERAGE_PATH}}/xml ${{env.COVERAGE_PATH}}/html

    - name: Coverage Report
      run: gcovr --print-summary --xml ${{github.workspace}}/coverage.xml --html-details ${{env.COVERAGE_PATH}}/html/coverage.html --filter include

    - name: Coverage Summary
      uses: irongut/CodeCoverageSummary@v1.3.0
      with:
        filename: coverage.xml
        badge: true
        fail_below_min: true
        format: markdown
        hide_branch_rate: false
        hide_complexity: false
        indicators: true
        output: both
        thresholds: '75 90'

    - name: Job Summary
      run: cat code-coverage-results.md >> $GITHUB_STEP_SUMMARY

    - name: Upload Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: html-coverage-report
        path: ${{env.COVERAGE_PATH}}/html
        if-no-files-found: error

    - name: Upload Artifacts for PR Comment
      uses: actions/upload-artifact@v3
      if: ${{github.event_name == 'pull_request'}}
      with:
        name: code-coverage-results
        path: code-coverage-results.md

