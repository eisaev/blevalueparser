name: Tests

on:
  push:
    branches: ['main']
  pull_request:
    branches: ['main']

jobs:
  test:
    strategy:
      matrix:
        BUILD_TYPE: [Debug, MinSizeRel]
        RUNNER:
          - RUNS_ON: [ubuntu-20.04, self-hosted]
            OS: ubuntu-20.04
            CLANG_TIDY: '-DCMAKE_CXX_CLANG_TIDY="clang-tidy;--export-fixes=clang-tidy.fixes;--fix;--warnings-as-errors=*"'
            TEST_BUNDLE_PATH: ''
          - RUNS_ON: [macos-12, self-hosted]
            OS: macos-12
            CLANG_TIDY: ''
            TEST_BUNDLE_PATH: '/tests/bvptest.app/Contents/MacOS'
          - RUNS_ON: [macos-13, self-hosted]
            OS: macos-13
            CLANG_TIDY: ''
            TEST_BUNDLE_PATH: '/tests/bvptest.app/Contents/MacOS'

    name: Test ${{matrix.RUNNER.OS}} - ${{matrix.BUILD_TYPE}}
    runs-on: ${{matrix.RUNNER.RUNS_ON}}

    env:
      BUILD_DIR: ${{github.workspace}}/build
      TESTS_DIR: ${{github.workspace}}/build${{matrix.RUNNER.TEST_BUNDLE_PATH}}
      THIRDPARTY_DIR: ${{github.workspace}}/3rdparty

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Install System Dependencies
      if: ${{matrix.RUNNER.OS == 'ubuntu-20.04'}}
      run: sudo apt install -y xsltproc clang-tidy

    - name: Install Ninja
      uses: seanmiddleditch/gha-setup-ninja@v3

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -G Ninja -B ${{env.BUILD_DIR}} -DBUILD_EXAMPLES=OFF -DCMAKE_BUILD_TYPE=${{matrix.BUILD_TYPE}} ${{matrix.RUNNER.CLANG_TIDY}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{env.BUILD_DIR}} --config ${{matrix.BUILD_TYPE}}

    - name: Test
      working-directory: ${{env.TESTS_DIR}}
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      #run: ctest -C ${{matrix.BUILD_TYPE}} --no-compress-output --test-output-size-passed 0 --test-output-size-failed 0 --output-junit junit-${{matrix.OS}}-${{matrix.BUILD_TYPE}}.xml
      run: GTEST_OUTPUT=xml:junit-${{matrix.RUNNER.OS}}-${{matrix.BUILD_TYPE}}.xml ./bvptest --gtest_output=xml:gtest-${{matrix.RUNNER.OS}}-${{matrix.BUILD_TYPE}}.xml

    - name: Convert GTest XML to JUnit
      working-directory: ${{env.TESTS_DIR}}
      run: xsltproc --output junit-${{matrix.RUNNER.OS}}-${{matrix.BUILD_TYPE}}.xml ${{env.THIRDPARTY_DIR}}/gtest_to_junit.xsl gtest-${{matrix.RUNNER.OS}}-${{matrix.BUILD_TYPE}}.xml

    - name: Upload Clang Tidy Artifacts
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: clang-tidy-fixes
        path: ${{env.BUILD_DIR}}/clang-tidy.fixes

    - name: Upload Test Report Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: test-report
        path: ${{env.TESTS_DIR}}/junit-*.xml
        if-no-files-found: error

  report:
    name: Test Report
    needs: test
    runs-on: [ubuntu-20.04, self-hosted]

    permissions:
      contents: read
      checks: write

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Download Artifacts
      uses: actions/download-artifact@v3
      with:
        name: test-report

    - name: Publish Test Results
      uses: dorny/test-reporter@v1
      with:
        name: Google Test JUnit
        path: 'junit-*.xml'
        reporter: jest-junit
